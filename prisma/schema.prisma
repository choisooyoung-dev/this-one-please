generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id         Int      @id @default(autoincrement()) @map("id")
  email      String   @unique @map("email")
  password   String   @map("password")
  name       String   @map("name")
  type       Int      @map("type")
  point      Int      @default(1000000) @map("point")
  address    String   @map("address")
  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @default(now()) @map("updated_at")
  Cart       Cart[]
  Orders     Orders[]
  Stores     Stores?

  @@map("Users")
}

model Categories {
  id         Int      @id @default(autoincrement()) @map("id")
  name       String   @map("name")
  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @default(now()) @map("updated_at")
  image_url  String   @map("image_url")
  Stores     Stores[]
}

model Stores {
  id          Int        @id @default(autoincrement()) @map("id")
  user_id     Int        @unique
  category_id Int
  name        String     @map("name")
  image_url   String
  address     String     @map("address")
  created_at  DateTime   @default(now()) @map("created_at")
  updated_at  DateTime   @default(now()) @map("updated_at")
  Cart        Cart[]
  Menus       Menus[]
  Orders      Orders[]
  Categories  Categories @relation(fields: [category_id], references: [id], onDelete: Cascade)
  Users       Users      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([category_id], map: "Stores_category_id_fkey")
  @@index([user_id], map: "Stores_user_id_fkey")
  @@map("Stores")
}

model Menus {
  id        Int    @id @default(autoincrement()) @map("id")
  store_id  Int    @map("store_id")
  name      String @map("name")
  price     Int    @map("price")
  image_url String @map("image_url")
  Cart      Cart[]
  Stores    Stores @relation(fields: [store_id], references: [id], onDelete: Cascade)

  @@index([store_id], map: "Menus_store_id_fkey")
}

model Cart {
  id       Int    @id @default(autoincrement()) @map("id")
  user_id  Int    @map("user_id")
  store_id Int    @map("store_id")
  menu_id  Int    @map("menu_id")
  count    Int    @map("count")
  Menu     Menus  @relation(fields: [menu_id], references: [id], onDelete: Cascade)
  Store    Stores @relation(fields: [store_id], references: [id], onDelete: Cascade)
  User     Users  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([menu_id], map: "Cart_menu_id_fkey")
  @@index([store_id], map: "Cart_store_id_fkey")
  @@index([user_id], map: "Cart_user_id_fkey")
  @@map("Cart")
}

model Orders {
  id         Int      @id @default(autoincrement()) @map("id")
  user_id    Int      @map("user_id")
  store_id   Int      @map("store_id")
  info       Json     @map("info")
  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @default(now()) @map("updated_at")
  Store      Stores   @relation(fields: [store_id], references: [id], onDelete: Cascade)
  User       Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Review     Reviews?

  @@index([store_id], map: "Orders_store_id_fkey")
  @@index([user_id], map: "Orders_user_id_fkey")
}

model Reviews {
  id         Int      @id @default(autoincrement()) @map("id")
  order_id   Int      @unique @map("order_id")
  comment    String   @map("comment")
  star       Float    @map("star")
  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @default(now()) @map("updated_at")
  Order      Orders   @relation(fields: [order_id], references: [id], onDelete: Cascade)
}
